syntax = "proto3";
option go_package = "/vaultcredpb";

package vaultcredpb;

service VaultCred {
  // single RPC for all credential types like user/password, certificates etc.
  // vault secret path  prepated based on <credentialType>/<credEntityName>/<credIdentifier>
  // for example, client-certs path will be certs/client/clientA
  // for example, cassandra root user path will be service-cred/cassandra/root
  // pass authentication token with service account token to authenticate & authorize the request with vault
  rpc GetCredential (GetCredentialRequest) returns (GetCredentialResponse) {};
  rpc PutCredential (PutCredentialRequest) returns (PutCredentialResponse) {};
  rpc DeleteCredential (DeleteCredentialRequest) returns (DeleteCredentialResponse) {};
  rpc CreateAppRoleToken(CreateAppRoleTokenRequest) returns (CreateAppRoleTokenResponse) {};
  rpc DeleteAppRole(DeleteAppRoleRequest) returns (DeleteAppRoleResponse) {};
  rpc GetCredentialWithAppRoleToken(GetCredentialWithAppRoleTokenRequest) returns (GetCredentialWithAppRoleTokenResponse) {};
  rpc AddClusterK8SAuth(AddClusterK8SAuthRequest) returns (AddClusterK8SAuthResponse) {};
  rpc DeleteClusterK8SAuth(DeleteClusterK8SAuthRequest) returns (DeleteClusterK8SAuthResponse) {};  
  rpc CreateK8SAuthRole(CreateK8SAuthRoleRequest) returns (CreateK8SAuthRoleResponse) {};
  rpc UpdateK8SAuthRole(UpdateK8SAuthRoleRequest) returns (UpdateK8SAuthRoleResponse) {};
  rpc DeleteK8SAuthRole(DeleteK8SAuthRoleRequest) returns (DeleteK8SAuthRoleResponse) {};
  rpc ConfigureVaultSecret(ConfigureVaultSecretRequest) returns (ConfigureVaultSecretResponse) {};
  
}

enum StatusCode {
   OK = 0;
   INTERNRAL_ERROR = 1;
   INVALID_ARGUMENT = 2;
   NOT_FOUND = 3;
}

message SecretPathRef {
  string SecretPath = 1;
  string SecretKey = 2;
}

message ConfigureVaultSecretRequest {  
  string secretName = 1;
  string namespace = 2;
  repeated SecretPathRef SecretPathData = 3;
  string domainName = 4;
}

message ConfigureVaultSecretResponse {
  StatusCode status = 1;
  string statusMessage = 2;
}

message GetCredentialRequest {
   string credentialType = 1;
   string credEntityName = 2;
   string credIdentifier = 3;
}

message GetCredentialResponse {
   //service-cred credential, for example: "userName": "iam-root", "password:: "hello"
   //client-cert credential, for example: "clientId": "intelops-user", "ca.crt": "...", "client.crt": "...", "client.key": "..."
   map<string, string> credential = 1;
}

message PutCredentialRequest {
   string credentialType = 1;
   string credEntityName = 2;
   string credIdentifier = 3;
   //service-cred credential, for example: "userName": "iam-root", "password:: "hello"
   //client-cert credential, for example: "clientId": "intelops-user", "ca.crt": "...", "client.crt": "...", "client.key": "..."
   map<string, string> credential = 6;
}

message PutCredentialResponse {
}

message DeleteCredentialRequest {
   string credentialType = 1;
   string credEntityName = 2;
   string credIdentifier = 3;
}

message DeleteCredentialResponse {
}

message CreateAppRoleTokenRequest {
   string appRoleName = 1;
   repeated string secretPaths = 2;
}

message CreateAppRoleTokenResponse {
   string token = 1;
}

message DeleteAppRoleRequest {
   string roleName = 1;
}

message DeleteAppRoleResponse {
   StatusCode status = 1;
   string statusMessage = 2;
}

message GetCredentialWithAppRoleTokenRequest {
   string token = 1;
   string secretPath = 2;
}

message GetCredentialWithAppRoleTokenResponse {
   map<string, string> credential = 1;
}


enum SecretAccess {
   READ = 0;
   WRITE = 1;  
}

message secretPolicy { 
   string secretPath = 1;
   SecretAccess access = 2;
}

message CreateK8SAuthRoleRequest { 
   string roleName = 1;
   repeated secretPolicy secretPolicy = 2;
   string clusterName = 3;
   repeated string namespaces = 4;
   repeated string serviceAccounts = 5;
}
 
message CreateK8SAuthRoleResponse { 
   StatusCode status = 1;
   string statusMessage = 2;
}
 
message UpdateK8SAuthRoleRequest { 
   string roleName = 1;
   repeated secretPolicy secretPolicy = 2;
   string clusterName = 3;
}
 
message UpdateK8SAuthRoleResponse { 
   StatusCode status = 1;
   string statusMessage = 2;
}
 
message DeleteK8SAuthRoleRequest { 
   string roleName = 1;
   string clusterName = 3;
}
 
message DeleteK8SAuthRoleResponse { 
   StatusCode status = 1;
   string statusMessage = 2;
}

message AddClusterK8SAuthRequest {
   string clusterName = 1;
   string host = 2;
   string caCert = 3;
   string jwtToken = 4;
}

message AddClusterK8SAuthResponse {
   StatusCode status = 1;
   string statusMessage = 2;
}

message DeleteClusterK8SAuthRequest {
   string clusterName = 1;
}

message DeleteClusterK8SAuthResponse {
   StatusCode status = 1;
   string statusMessage = 2;
}